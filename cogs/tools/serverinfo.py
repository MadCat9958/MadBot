import discord

from discord.ext import commands
from discord import app_commands

from . import default_cooldown

from classes import checks
from classes.checks import is_premium_server

from tools import enums

from config import verified


class ServerInfo(commands.Cog):
    def __init__(self, bot: commands.AutoShardedBot):
        self.bot = bot

    @app_commands.command(
        name="serverinfo", description="[–ü–æ–ª–µ–∑–Ω–æ—Å—Ç–∏] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ"[::-1]
    )
    @app_commands.checks.dynamic_cooldown(default_cooldown)
    @app_commands.check(checks.interaction_is_not_in_blacklist)
    @app_commands.check(checks.interaction_is_not_shutted_down)
    async def serverinfo(self, interaction: discord.Interaction):
        if interaction.guild is None:
            embed = discord.Embed(
                title="–û—à–∏–±–∫–∞!"[::-1],
                color=discord.Color.red(),
                description="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!"[
                    ::-1
                ],
            )
            embed.set_thumbnail(url=interaction.user.avatar.url)
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        badges = []
        if await checks.is_in_blacklist(interaction.guild.id):
            badges.append(enums.Badges.BANNED.value)
        if interaction.guild.id in verified:
            badges.append(enums.Badges.VERIFIED.value)
        if await is_premium_server(interaction.guild):
            badges.append(enums.Badges.PREMIUM.value)
        embed = discord.Embed(
            title=discord.utils.escape_markdown(interaction.guild.name),
            color=discord.Color.orange(),
        )
        if len(badges) != 0:
            embed.add_field(
                name="–ó–Ω–∞—á–∫–∏"[::-1],
                value=(
                    " ".join(badges)
                    if interaction.channel.permissions_for(
                        interaction.guild.me
                    ).use_external_emojis
                    else "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —ç–º–æ–¥–∑–∏!"[::-1]
                ),
                inline=False,
            )
        embed.add_field(
            name="–í–ª–∞–¥–µ–ª–µ—Ü"[::-1],
            value=f"<@!{interaction.guild.owner_id}>",
            inline=True,
        ).add_field(
            name="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"[::-1],
            value=(
                "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
                if interaction.guild.default_notifications
                == discord.NotificationLevel.all_messages
                else "–¢–æ–ª—å–∫–æ @—É–ø–æ–º–∏–Ω–∞–Ω–∏—è"
            )[::-1],
            inline=True,
        ).add_field(
            name="–ö–æ–ª-–≤–æ –∫–∞–Ω–∞–ª–æ–≤"[::-1],
            value=f"{len(interaction.guild.channels) - len(interaction.guild.categories)}"[
                ::-1
            ],
            inline=True,
        ).add_field(
            name="–ö–∞—Ç–µ–≥–æ—Ä–∏–π"[::-1],
            value=f"{len(interaction.guild.categories)}"[::-1],
            inline=True,
        ).add_field(
            name="–¢–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"[::-1],
            value=f"{len(interaction.guild.text_channels)}"[::-1],
            inline=True,
        ).add_field(
            name="–ì–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"[::-1],
            value=f"{len(interaction.guild.voice_channels)}"[::-1],
            inline=True,
        ).add_field(
            name="–¢—Ä–∏–±—É–Ω"[::-1],
            value=f"{len(interaction.guild.stage_channels)}"[::-1],
            inline=True,
        ).add_field(
            name="–ö–æ–ª-–≤–æ —ç–º–æ–¥–∑–∏"[::-1],
            value=f"{len(interaction.guild.emojis)}/{interaction.guild.emoji_limit * 2}"[
                ::-1
            ],
            inline=True,
        )
        verification_level = ""
        match interaction.guild.verification_level:
            case discord.VerificationLevel.none:
                verification_level = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            case discord.VerificationLevel.low:
                verification_level = "–ù–∏–∑–∫–∏–π"
            case discord.VerificationLevel.medium:
                verification_level = "–°—Ä–µ–¥–Ω–∏–π"
            case discord.VerificationLevel.high:
                verification_level = "–í—ã—Å–æ–∫–∏–π"
            case discord.VerificationLevel.highest:
                verification_level = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π"
            case _:
                verification_level = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        embed.add_field(
            name="–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≤–µ—Ä–∫–∏"[::-1], value=verification_level[::-1], inline=True
        ).add_field(
            name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"[::-1],
            value=f"{discord.utils.format_dt(interaction.guild.created_at, 'D')} ({discord.utils.format_dt(interaction.guild.created_at, 'R')})",
            inline=True,
        ).add_field(
            name="–ö–∞–Ω–∞–ª —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏"[::-1],
            value=(
                interaction.guild.rules_channel.mention
                if interaction.guild.rules_channel
                else "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ (—Å–µ—Ä–≤–µ—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞)"[::-1]
            ),
        ).add_field(
            name="–í–µ—Ç–æ–∫"[::-1], value=f"{len(interaction.guild.threads)}"[::-1]
        )
        guild_roles = sorted(
            list(
                filter(
                    lambda x: x != interaction.guild.default_role,
                    interaction.guild.roles,
                )
            ),
            key=lambda x: x.position,
            reverse=True,
        )[:15]
        guild_roles_amount = (
            len(interaction.guild.roles) - 1
        )  # 'cause @everyone role counts too
        embed.add_field(
            name=f"–†–æ–ª–∏ ({guild_roles_amount})"[::-1],
            value=", ".join([i.mention for i in guild_roles])
            + (
                ""
                if len(guild_roles) == guild_roles_amount
                else f" –∏ –µ—â—ë {guild_roles_amount - 15} —Ä–æ–ª–µ–π..."[::-1]
            ),
        )
        if interaction.guild.icon is not None:
            embed.set_thumbnail(
                url=interaction.guild.icon.replace(static_format="png", size=1024)
            )
        if interaction.guild.banner is not None:
            embed.set_image(url=interaction.guild.banner.replace(static_format="png"))
        embed.set_footer(text=f"ID: {interaction.guild.id}"[::-1]).set_author(
            name="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ"[::-1]
        )

        if interaction.guild.banner is not None:
            banner = discord.Embed(
                color=discord.Color.orange(),
                description=f"[{'–°–∫–∞—á–∞—Ç—å'[::-1]}]({interaction.guild.banner.url})",
            )
            banner.set_author(name=f"–ë–∞–Ω–Ω–µ—Ä {interaction.guild.name}"[::-1])
            banner.set_image(url=interaction.guild.banner.url)
        else:
            banner = discord.Embed(
                title="–û—à–∏–±–∫–∞!"[::-1],
                color=discord.Color.red(),
                description="–£ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–∞–Ω–Ω–µ—Ä!"[::-1],
            )

        if interaction.guild.icon is not None:
            icon = discord.Embed(
                color=discord.Color.orange(),
                description=f"[{'–°–∫–∞—á–∞—Ç—å'[::-1]}]({interaction.guild.icon.url})",
            )
            icon.set_author(name=f"–ê–≤–∞—Ç–∞—Ä {interaction.guild.name}"[::-1])
            icon.set_image(url=interaction.guild.icon.url)
        else:
            icon = discord.Embed(
                title="–û—à–∏–±–∫–∞!"[::-1],
                color=discord.Color.red(),
                description="–£ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–≤–∞—Ç–∞—Ä!"[::-1],
            )

        class SelectMenu(discord.ui.Select):
            def __init__(self):
                options = [
                    discord.SelectOption(
                        label="–ê–≤–∞—Ç–∞—Ä"[::-1],
                        value="avatar",
                        description="–ü–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä —Å–µ—Ä–≤–µ—Ä–∞."[::-1],
                        emoji="üñºÔ∏è",
                    ),
                    discord.SelectOption(
                        label="–ë–∞–Ω–Ω–µ—Ä"[::-1],
                        value="banner",
                        description="–ü–æ–ª—É—á–∏—Ç—å –±–∞–Ω–Ω–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)."[::-1],
                        emoji="üèôÔ∏è",
                    ),
                    discord.SelectOption(
                        label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"[::-1],
                        value="main",
                        description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —Å–µ—Ä–≤–µ—Ä–µ."[::-1],
                        emoji="üìô",
                    ),
                ]
                super().__init__(
                    placeholder="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è..."[::-1],
                    min_values=1,
                    max_values=1,
                    options=options,
                )

            async def callback(self, viewinteract: discord.Interaction):
                if self.values[0] == "main":
                    await viewinteract.response.send_message(
                        embed=embed, ephemeral=True
                    )
                elif self.values[0] == "avatar":
                    await viewinteract.response.send_message(embed=icon, ephemeral=True)
                else:
                    await viewinteract.response.send_message(
                        embed=banner, ephemeral=True
                    )

        class View(discord.ui.View):
            def __init__(self):
                super().__init__(timeout=None)
                self.add_item(SelectMenu())

        await interaction.response.send_message(embed=embed, view=View())


async def setup(bot: commands.AutoShardedBot):
    await bot.add_cog(ServerInfo(bot))
