import discord
import sys
import distro
import datetime

from discord.ext import commands
from discord import app_commands

from . import default_cooldown

from classes import checks
from classes import db

from config import settings
from config import started_at


class BotInfo(commands.Cog):
    def __init__(self, bot: commands.AutoShardedBot):
        self.bot = bot

    async def cog_load(self):
        thanks_users = {  # —è —Ç–µ–ø–µ—Ä—å –∑–Ω–∞—é, —á—Ç–æ –µ—â—ë –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
            754719910256574646: "–ë—ã–≤—à–∏–π –≤—Ç–æ—Ä–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞ –∏ –ª—É—á—à–∏–π –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä. –ù–∞–ø–∏—Å–∞–ª –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π "
            "–∏ –ø–æ–º–æ–≥ –≤—ã—è–≤–∏—Ç—å –±–æ–ª–µ–µ 20-—Ç–∏ –±–∞–≥–æ–≤. –û–¥–∏–Ω –∏–∑ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –±–æ—Ç–∞.",
            777140702747426817: "–ü–æ–º–∏–º–æ –µ–≥–æ —Ä–∞–±–æ—Ç—ã —Å–∞–ø–ø–æ—Ä—Ç–æ–º, –æ–Ω —á–∞—Å—Ç–æ –∞–ø–∞–µ—Ç –±–æ—Ç–∞, —á–µ–º –ø–æ–º–æ–≥–∞–µ—Ç –≤ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏ –µ–≥–æ. "
            "–û–¥–∏–Ω –∏–∑ –ø–µ—Ä–≤—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –±–æ—Ç–∞.",
            529302484901036043: "–ë—ã–≤—à–∏–π —Ç—Ä–µ—Ç–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–ª –≤ –ø–µ—Ä–µ–ø–∏—Å–∏ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–¥–∞. "
            "–¢–∞–∫–∂–µ –æ–Ω –ø–æ–º–æ–≥ —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ–¥–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –±–æ—Ç–∞.",
        }
        self.thanks_user = {}
        for tu in thanks_users:
            if not self.bot.intents.members:
                try:
                    u = await self.bot.fetch_user(tu)
                except discord.NotFound:
                    u = None
            else:
                u = self.bot.get_user(tu)

            self.thanks_user[str(u or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {tu}")] = thanks_users[tu]

    @app_commands.command(name="botinfo", description="[–ü–æ–ª–µ–∑–Ω–æ—Å—Ç–∏] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
    @app_commands.checks.dynamic_cooldown(default_cooldown)
    @app_commands.check(checks.interaction_is_not_in_blacklist)
    @app_commands.check(checks.interaction_is_not_shutted_down)
    async def botinfo(self, interaction: discord.Interaction):
        embed = discord.Embed(
            title=f"{self.bot.user.name} - v{settings['curr_version']}",
            color=discord.Color.orange(),
            description=f"–î–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é —Å–Ω–∏–∑—É.\n\n**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**",
        )
        embed.add_field(name="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", value=f"<@!{settings['owner_id']}>")
        embed.add_field(name="ID —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", value=f"`{settings['owner_id']}`")
        embed.add_field(name="ID –±–æ—Ç–∞", value=f"`{self.bot.user.id}`")
        embed.set_thumbnail(url=self.bot.user.display_avatar.url)
        embed.set_footer(
            text=f"¬©Ô∏è 2021 - {datetime.datetime.now().year} MadBot. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã."
        )

        bot_stats = await db.get_bot_stats()
        stats = discord.Embed(
            title=f"{self.bot.user.name} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", color=discord.Color.orange()
        )
        stats.add_field(name="–ü–∏–Ω–≥", value=f"{int(round(self.bot.latency, 3)*1000)}ms")
        stats.add_field(name="–ó–∞–ø—É—â–µ–Ω", value=f"<t:{started_at}:R>")
        stats.add_field(name="–ö–æ–ª-–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤", value=f"{len(self.bot.guilds):,}")
        stats.add_field(name="–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=f"{len(self.bot.users):,}")
        stats.add_field(
            name="–ü–æ—Å–ª–µ–¥–Ω—è—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
            value=bot_stats["last_command"] or "–ï—â—ë –Ω–∏ —Ä–∞–∑—É –∫–æ–º–∞–Ω–¥—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å",
        )
        stats.add_field(
            name="–ö–æ–ª-–≤–æ –∫–æ–º–∞–Ω–¥/–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –º–µ–Ω—é",
            value=f"{len(self.bot.tree.get_commands(type=discord.AppCommandType.chat_input)):,}/{len(self.bot.tree.get_commands(type=discord.AppCommandType.user)) + len(self.bot.tree.get_commands(type=discord.AppCommandType.message)):,}",
        )
        stats.add_field(
            name="–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥", value=f"{bot_stats['used_commands']:,}"
        )
        stats.set_thumbnail(url=self.bot.user.display_avatar.url)
        stats.set_footer(
            text=str(interaction.user), icon_url=interaction.user.display_avatar.url
        )

        versions = discord.Embed(
            title=f"{self.bot.user.name} - –í–µ—Ä—Å–∏–∏", color=discord.Color.orange()
        )
        versions.add_field(name="–í–µ—Ä—Å–∏—è", value=settings["curr_version"])
        versions.add_field(
            name="–í–µ—Ä—Å–∏—è discord.py",
            value=f"{discord.version_info.major}.{discord.version_info.minor}.{discord.version_info.micro} `{discord.version_info.releaselevel.upper()}`",
        )
        versions.add_field(
            name="–í–µ—Ä—Å–∏—è Python",
            value=f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
        )
        ver_info = sys.platform
        if ver_info.startswith("win32"):
            ver_info = "Windows"
        if ver_info.startswith("linux"):
            ver_info = distro.name(pretty=True)
        if ver_info.startswith("aix"):
            ver_info = "AIX"
        if ver_info.startswith("darwin"):
            ver_info = "MacOS"
        versions.add_field(name="–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", value=ver_info)
        versions.set_thumbnail(url=self.bot.user.display_avatar.url)
        versions.set_footer(
            text=str(interaction.user), icon_url=interaction.user.display_avatar.url
        )

        thanks = discord.Embed(
            title=f"{self.bot.user.name} - –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏",
            color=discord.Color.orange(),
            description="–≠—Ç–∏–º –ª—é–¥—è–º —è –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω. –ë–ª–∞–≥–æ–¥–∞—Ä—è –∏–º, MadBot –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –∏ —É–ª—É—á—à–∞–µ—Ç—Å—è.",
        )
        thanks.set_thumbnail(url=self.bot.user.display_avatar.url)
        thanks.set_footer(
            text=str(interaction.user), icon_url=interaction.user.display_avatar.url
        )

        for tu in self.thanks_user:
            thanks.add_field(name=tu, value=self.thanks_user[tu], inline=False)

        embeds = {
            "embed": embed,
            "stats": stats,
            "versions": versions,
            "thanks": thanks,
        }

        class DropDown(discord.ui.Select):
            def __init__(self):
                options = [
                    discord.SelectOption(
                        label="–ì–ª–∞–≤–Ω–∞—è",
                        value="embed",
                        description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                        emoji="üê±",
                    ),
                    discord.SelectOption(
                        label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                        value="stats",
                        description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞.",
                        emoji="üìä",
                    ),
                    discord.SelectOption(
                        label="–í–µ—Ä—Å–∏–∏",
                        value="versions",
                        description="–í–µ—Ä—Å–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ Python.",
                        emoji="‚öíÔ∏è",
                    ),
                    discord.SelectOption(
                        label="–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏",
                        value="thanks",
                        description="–≠—Ç–∏ –ª—é–¥–∏ —Å–¥–µ–ª–∞–ª–∏ –º–Ω–æ–≥–æ–µ –¥–ª—è –±–æ—Ç–∞.",
                        emoji="‚ù§Ô∏è",
                    ),
                ]
                super().__init__(placeholder="–í—ã–±–æ—Ä...", options=options, row=1)

            async def callback(self, viewinteract: discord.Interaction):
                if interaction.user != viewinteract.user:
                    return await viewinteract.response.send_message(
                        embed=embeds[self.values[0]], ephemeral=True
                    )
                else:
                    await interaction.edit_original_response(
                        embed=embeds[self.values[0]]
                    )
                    await viewinteract.response.defer()

        class View(discord.ui.View):
            def __init__(self):
                super().__init__(timeout=None)
                self.add_item(
                    discord.ui.Button(label="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=settings["support_invite"])
                )
                self.add_item(
                    discord.ui.Button(label="–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥", url=settings["github_url"])
                )
                self.add_item(
                    discord.ui.Button(
                        label="–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞",
                        url=f"https://discord.com/oauth2/authorize?client_id={settings['app_id']}&permissions={settings['perm_scope']}&scope=bot%20applications.commands",
                    )
                )
                self.add_item(
                    discord.ui.Button(
                        label="–ê–ø–Ω—É—Ç—å –±–æ—Ç–∞: BotiCord.top",
                        url=f"https://boticord.top/bot/{settings['app_id']}",
                        emoji="<:bc:947181639384051732>",
                    )
                )
                self.add_item(
                    discord.ui.Button(
                        label="–ê–ø–Ω—É—Ç—å –±–æ—Ç–∞: SDC Monitoring",
                        url=f"https://bots.server-discord.com/{settings['app_id']}",
                        emoji="<:favicon:981586173204000808>",
                    )
                )
                self.add_item(DropDown())

        await interaction.response.send_message(embed=embed, view=View())


async def setup(bot: commands.AutoShardedBot):
    await bot.add_cog(BotInfo(bot))
