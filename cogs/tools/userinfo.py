import discord

from discord.ext import commands
from discord import app_commands

from . import default_cooldown

from classes import checks
from classes.checks import isPremium

from config import settings
from config import coders
from config import supports
from config import bug_hunters
from config import bug_terminators
from config import verified

class UserInfo(commands.Cog):
    def __init__(self, bot: commands.AutoShardedBot):
        self.bot = bot

    @app_commands.command(name="userinfo", description="[–ü–æ–ª–µ–∑–Ω–æ—Å—Ç–∏] –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
    @app_commands.checks.dynamic_cooldown(default_cooldown)
    @app_commands.check(lambda i: not checks.is_in_blacklist(i.user.id))
    @app_commands.check(lambda i: not checks.is_shutted_down(i.command.name))
    @app_commands.describe(member='–£—á–∞—Å—Ç–Ω–∏–∫')
    async def userinfo(self, interaction: discord.Interaction, member: discord.User = None):
        if interaction.guild is None:
            embed=discord.Embed(title="–û—à–∏–±–∫–∞!", color=discord.Color.red(), description="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!")
            embed.set_thumbnail(url=interaction.user.display_avatar.url)
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        if isinstance(member, discord.User):
            embed=discord.Embed(title="–û—à–∏–±–∫–∞!", color=discord.Color.red(), description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –Ω—ë–º!")
            embed.set_thumbnail(url=interaction.user.display_avatar.url)
        badges = ''
        if member is None: member = interaction.user
        else:
            try:
                member = await interaction.guild.fetch_member(member.id)
            except:
                embed = discord.Embed(title="–û—à–∏–±–∫–∞!", color=discord.Color.red(), description="–£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã!")
                embed.set_thumbnail(url=interaction.user.display_avatar.url)
                return await interaction.response.send_message(embed=embed, ephemeral=True)
        
        try:
            member = await interaction.guild.fetch_member(member.id)
        except:
            embed = discord.Embed(
                title="–û—à–∏–±–∫–∞!",
                color=discord.Color.red(),
                description=(
                    "–°—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ –Ω–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –í–∞—Å –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞. –¢–∞–∫ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ. "
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ —Å—Å—ã–ª–∫–µ –≤ \"–æ–±–æ –º–Ω–µ\" –±–æ—Ç–∞ –∏–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –≤ `/help` –∏–ª–∏ `/botinfo`."
                )
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        
        member_color = member.color
        if member_color.value == 0:
            member_color = discord.Color.orange()
        
        embed = discord.Embed(color=member_color, description=f"[–°–∫–∞—á–∞—Ç—å]({member.display_avatar.replace(static_format='png', size=2048)})")
        embed.set_author(name=f"–ê–≤–∞—Ç–∞—Ä {member}")
        embed.set_image(url=member.display_avatar.replace(static_format="png", size=2048))
        embed.set_footer(text=f"–§–æ—Ä–º–∞—Ç: png | –†–∞–∑–º–µ—Ä: 2048 | –¢–∏–ø –∞–≤–∞—Ç–∞—Ä–∞: –°–µ—Ä–≤–µ—Ä–Ω—ã–π.")

        if checks.is_in_blacklist(member.id):
            badges += '<:ban:946031802634612826> '
        if isPremium(self.bot, member.id) != 'None':
            badges += '<a:premium:988735181546475580> '
        if member.is_timed_out():
            badges += '<:timeout:950702768782458893> '
        if member.id == settings['owner_id']:
            badges += '<:botdev:977645046188871751> '
        if member.id in coders:
            badges += '<:code:946056751646638180> '
        if member.id in supports:
            badges += '<:support:946058006641143858> '
        if member.id in bug_hunters:
            badges += '<:bug_hunter:955497457020715038> '
        if member.id in bug_terminators:
            badges += '<:bug_terminator:955891723152801833> '
        if member.id in verified:
            badges += '<:verified:946057332389978152> '
        if member.bot:
            badges += '<:bot:946064625525465118> '
        emb: discord.Embed
        global_name = member.global_name or member.name
        username = str(member)
        if member.nick is None:
            emb = discord.Embed(
                title=f"`{global_name} "
                f"({username})` {badges}", 
                color=member_color
            )
        else:
            emb = discord.Embed(
                title=f"`{global_name} "
                f"({username})` | `{member.nick}` {badges}", 
                color=member_color
            )
        emb.add_field(name="–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ:", value=member.mention, inline=False)
        if self.bot.intents.presences:
            if member.status == discord.Status.online:
                emb.add_field(name="–°—Ç–∞—Ç—É—Å:", value="üü¢ –í —Å–µ—Ç–∏", inline=False)
            elif member.status == discord.Status.idle:
                emb.add_field(name="–°—Ç–∞—Ç—É—Å:", value="üåô –ù–µ—Ç –Ω–∞ –º–µ—Å—Ç–µ", inline=False)
            elif member.status == discord.Status.dnd:
                emb.add_field(name="–°—Ç–∞—Ç—É—Å:", value="üî¥ –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å", inline=False)
            else:
                emb.add_field(name="–°—Ç–∞—Ç—É—Å:", value="üîò –ù–µ –≤ —Å–µ—Ç–∏", inline=False)
        emb.add_field(name="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å:", value=f"[–¢—ã–∫](https://discord.com/users/{member.id})", inline=False)
        if member.bot:
            emb.add_field(name="–ë–æ—Ç?:", value="–î–∞", inline=False)
        else:
            emb.add_field(name="–ë–æ—Ç?:", value="–ù–µ—Ç", inline=False)
        if member.guild_permissions.administrator:
            emb.add_field(name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä?:", value=f'–î–∞', inline=False)
        else:
            emb.add_field(name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä?:", value='–ù–µ—Ç', inline=False)
        emb.add_field(name="–°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ä–æ–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", value=f"{member.top_role.mention}", inline=False)
        emb.add_field(name="–ê–∫–∞—É–Ω—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω:", value=f"{discord.utils.format_dt(member.created_at, 'D')} ({discord.utils.format_dt(member.created_at, 'R')})", inline=False)
        emb.add_field(name="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:", value=f"{discord.utils.format_dt(member.joined_at, 'D')} ({discord.utils.format_dt(member.joined_at, 'R')})", inline=False)
        emb.set_thumbnail(url=member.display_avatar.replace(static_format="png", size=1024))
        member = await self.bot.fetch_user(member.id)
        if member.banner is not None:
            emb.set_image(url=member.banner.url)
        emb.set_footer(text=f'ID: {member.id}')

        if member.banner is not None:
            banner = discord.Embed(color=member_color, description=f"[–°–∫–∞—á–∞—Ç—å]({member.banner.url})")
            banner.set_author(name=f"–ë–∞–Ω–Ω–µ—Ä {member}")
            banner.set_image(url=member.banner.url)
        else:
            banner = discord.Embed(title="–û—à–∏–±–∫–∞", color=discord.Color.red(), description="–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–∞–Ω–Ω–µ—Ä!")

        class SelectMenu(discord.ui.Select):
            def __init__(self):
                options = [
                    discord.SelectOption(label="–ê–≤–∞—Ç–∞—Ä", value="avatar", description="–ü–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", emoji="üñºÔ∏è"),
                    discord.SelectOption(label="–ë–∞–Ω–Ω–µ—Ä", value="banner", description="–ü–æ–ª—É—á–∏—Ç—å –±–∞–Ω–Ω–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏).", emoji="üèôÔ∏è"),
                    discord.SelectOption(label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", value="main", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.", emoji="üìô")
                ]
                super().__init__(placeholder="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è...", min_values=1, max_values=1, options=options)
            
            async def callback(self, viewinteract: discord.Interaction):
                if self.values[0] == "main":
                    await viewinteract.response.send_message(embed=emb, ephemeral=True)
                elif self.values[0] == "avatar":
                    await viewinteract.response.send_message(embed=embed, ephemeral=True)
                else:
                    await viewinteract.response.send_message(embed=banner, ephemeral=True)

        class View(discord.ui.View):
            def __init__(self):
                super().__init__(timeout=None)
                self.add_item(SelectMenu())

        await interaction.response.send_message(embed=emb, view=View())

async def setup(bot: commands.AutoShardedBot):
    await bot.add_cog(UserInfo(bot))