import discord
import datetime

from discord.ext import commands
from discord import app_commands

from . import default_cooldown
from classes import checks
from config import settings
from config import supports


class HelpCommand(commands.Cog):
    def __init__(self, bot: commands.AutoShardedBot):
        self.bot = bot

    @app_commands.command(
        name="help", description="[–ü–æ–ª–µ–∑–Ω–æ—Å—Ç–∏] –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ."[::-1]
    )
    @app_commands.checks.dynamic_cooldown(default_cooldown)
    @app_commands.check(checks.interaction_is_not_in_blacklist)
    @app_commands.check(checks.interaction_is_not_shutted_down)
    async def help(self, interaction: discord.Interaction):
        commands = self.bot.tree.get_commands(type=discord.AppCommandType.chat_input)
        mod_commands = ""
        tools_commands = ""
        ent_commands = ""
        react_commands = ""
        stats_commands = ""
        marry_commands = ""
        premium_commands = ""

        commands.sort(key=lambda i: i.name)

        for command in commands:
            if command.description.startswith("[–ú–æ–¥–µ—Ä–∞—Ü–∏—è]"[::-1]):
                mod_commands += f"`/{command.qualified_name}` - {command.description.removeprefix('[–ú–æ–¥–µ—Ä–∞—Ü–∏—è]'[::-1])}\n"
            if command.description.startswith("[–ü–æ–ª–µ–∑–Ω–æ—Å—Ç–∏]"[::-1]):
                tools_commands += f"`/{command.qualified_name}` - {command.description.removeprefix('[–ü–æ–ª–µ–∑–Ω–æ—Å—Ç–∏]'[::-1])}\n"
            if command.description.startswith(
                "[–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è]"[::-1]
            ) or command.description.startswith("[NSFW]"[::-1]):
                ent_commands += f"`/{command.qualified_name}` - {command.description.removeprefix('[–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è]'[::-1]).removeprefix('[NSFW]'[::-1])}\n"
            if command.description.startswith("[–†–µ–∞–∫—Ü–∏–∏]"[::-1]):
                react_commands += f"`/{command.qualified_name}` - {command.description.removeprefix('[–†–µ–∞–∫—Ü–∏–∏]'[::-1])}\n"
            if command.description.startswith("[–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞]"[::-1]):
                stats_commands += f"`/{command.qualified_name}` - {command.description.removeprefix('[–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞]'[::-1])}\n"
            if command.description.startswith("[–°–≤–∞–¥—å–±—ã]"[::-1]):
                marry_commands += f"`/{command.qualified_name}` - {command.description.removeprefix('[–°–≤–∞–¥—å–±—ã]'[::-1])}\n"
            if command.qualified_name.startswith("premium"):
                premium_commands += (
                    f"`/{command.qualified_name}` - {command.description}\n"
                )

        moderation = discord.Embed(
            title=f"{self.bot.user.name} - –ú–æ–¥–µ—Ä–∞—Ü–∏—è"[::-1],
            color=discord.Color.orange(),
            description=mod_commands,
        )
        tools = discord.Embed(
            title=f"{self.bot.user.name} - –ü–æ–ª–µ–∑–Ω–æ—Å—Ç–∏"[::-1],
            color=discord.Color.orange(),
            description=tools_commands,
        )
        entertainment = discord.Embed(
            title=f"{self.bot.user.name} - –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"[::-1],
            color=discord.Color.orange(),
            description=ent_commands,
        )
        reactions = discord.Embed(
            title=f"{self.bot.user.name} - –†–µ–∞–∫—Ü–∏–∏"[::-1],
            color=discord.Color.orange(),
            description=react_commands,
        )
        marry = discord.Embed(
            title=f"{self.bot.user.name} - –°–≤–∞–¥—å–±—ã"[::-1],
            color=discord.Color.orange(),
            description=marry_commands,
        )
        stats = discord.Embed(
            title=f"{self.bot.user.name} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"[::-1],
            color=discord.Color.orange(),
            description=stats_commands,
        )
        premium = discord.Embed(
            title=f"{self.bot.user.name} - –ü—Ä–µ–º–∏—É–º"[::-1],
            color=discord.Color.orange(),
            description=premium_commands,
        )
        embed = discord.Embed(
            title=f"{self.bot.user.name} - –ì–ª–∞–≤–Ω–∞—è"[::-1],
            color=discord.Color.orange(),
            description=f"""–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {self.bot.user.name}! –Ø –∏—Å–ø–æ–ª—å–∑—É—é —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥—ã, –ø–æ—ç—Ç–æ–º—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∏–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Discord.
            
**–ß—Ç–æ —è —É–º–µ—é?**
- **–†–∞–∑–≤–ª–µ–∫–∞—Ç—å**. –ï—Å–ª–∏ –í–∞–º —Å–∫—É—á–Ω–æ, —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–∑–≤–ª–µ—á—å—Å—è.
- **–†–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å**. –•–æ—Ç–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞!
- **–ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å**. –ö—Ç–æ-—Ç–æ –≤–µ–¥—ë—Ç —Å–µ–±—è –ø–ª–æ—Ö–æ –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ö–ª–æ–ø–æ—Ç –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º? –ù–∞–∫–∞–∂–∏—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.
- **–ü—Ä–æ—á–µ–µ**. –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É, –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–º–µ—Ä –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–Ω–æ –≤ –æ–¥–Ω–æ–º –±–æ—Ç–µ!
            
### –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""[::-1],
        )
        embed.add_field(
            name="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É"[::-1],
            value=(
                "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ - –Ω–µ –≤—Å–µ–≥–¥–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–ª–∞—Ç–∏—Ç—å. "
                "–ï—Å–ª–∏ —É –í–∞—Å –Ω–µ—Ç –¥–µ–Ω–µ–≥, –ø—Ä–æ—Å—Ç–æ –æ—Ü–µ–Ω–∏—Ç–µ –±–æ—Ç–∞ –Ω–∞ Boticord –∏ SDC Monitoring. "
                "–¢–∞–∫ –í—ã –ø–æ–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å –±–æ—Ç–∞. –ú–æ–∂–µ—Ç–µ –µ—â—ë –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤ - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç–µ–º –∏ —É—á—Ç–µ–º –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è! "
                "–¢–∞–∫–∂–µ –ø—Ä–æ–µ–∫—Ç —è–≤–ª—è–µ—Ç—Å—è Open Source –∏ —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–∞ —á–∏—Å—Ç–æ–º —ç–Ω—Ç—É–∑–∏–∞–∑–º–µ. –ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ Github –±–æ—Ç–∞. "
                "–í–æ–∑–º–æ–∂–Ω–æ, —É –í–∞—Å –±—É–¥–µ—Ç –∫–∞–∫–æ–µ-—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞."
            )[::-1],
        )

        class DropDownCommands(discord.ui.Select):
            def __init__(self):
                options = [
                    discord.SelectOption(
                        label="–ì–ª–∞–≤–Ω–∞—è"[::-1],
                        value="embed",
                        description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."[::-1],
                        emoji="üê±",
                    ),
                    discord.SelectOption(
                        label="–ú–æ–¥–µ—Ä–∞—Ü–∏—è"[::-1],
                        value="moderation",
                        description="–ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏."[::-1],
                        emoji="üõë",
                    ),
                    discord.SelectOption(
                        label="–ü–æ–ª–µ–∑–Ω–æ—Å—Ç–∏"[::-1],
                        value="tools",
                        description="–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."[::-1],
                        emoji="‚öíÔ∏è",
                    ),
                    discord.SelectOption(
                        label="–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"[::-1],
                        value="entertainment",
                        description="–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."[::-1],
                        emoji="üéâ",
                    ),
                    discord.SelectOption(
                        label="–†–µ–∞–∫—Ü–∏–∏"[::-1],
                        value="reactions",
                        description="–ö–æ–º–∞–Ω–¥—ã —Ä–µ–∞–∫—Ü–∏–π."[::-1],
                        emoji="üé≠",
                    ),
                    discord.SelectOption(
                        label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"[::-1],
                        value="stats",
                        description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞."[::-1],
                        emoji="üìä",
                    ),
                    discord.SelectOption(
                        label="–°–≤–∞–¥—å–±—ã"[::-1],
                        value="marry",
                        description="–ñ–µ–Ω–∏—Ç–µ—Å—å –∏ —Ä–∞–∑–≤–æ–¥–∏—Ç–µ—Å—å."[::-1],
                        emoji="‚ù§Ô∏è",
                    ),
                    discord.SelectOption(
                        label="–ü—Ä–µ–º–∏—É–º"[::-1],
                        value="premium",
                        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–æ–π."[::-1],
                        emoji="üëë",
                    ),
                ]
                super().__init__(placeholder="–ö–æ–º–∞–Ω–¥—ã"[::-1], options=options)

            async def callback(self, viewinteract: discord.Interaction):
                embeds_dict = {
                    "embed": embed,
                    "moderation": moderation,
                    "tools": tools,
                    "reactions": reactions,
                    "entertainment": entertainment,
                    "marry": marry,
                    "premium": premium,
                    "stats": stats,
                }
                if interaction.user.id != viewinteract.user.id:
                    return await viewinteract.response.send_message(
                        embed=embeds_dict[self.values[0]], ephemeral=True
                    )
                return await viewinteract.response.edit_message(
                    embed=embeds_dict[self.values[0]]
                )

        class DropDownHelp(discord.ui.Select):
            def __init__(self):
                options = [
                    discord.SelectOption(
                        label="–Ø –Ω–∞—à–µ–ª –±–∞–≥!"[::-1],
                        value="bugreport",
                        description="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É, –∏ –º—ã –∏—Å–ø—Ä–∞–≤–∏–º –±–∞–≥ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!"[::-1],
                        emoji="üêû",
                    ),
                    discord.SelectOption(
                        label="–£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å!"[::-1],
                        value="question",
                        description="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É, –∏ –≤–∞–º –æ—Ç–≤–µ—Ç—è—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å!"[::-1],
                        emoji="‚ùì",
                    ),
                ]
                super().__init__(placeholder="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"[::-1], options=options)

            class BugReport(discord.ui.Modal, title="–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ"[::-1]):
                main = discord.ui.TextInput(
                    label="–¢–µ–º–∞:"[::-1],
                    placeholder="–ö–æ–º–∞–Ω–¥–∞ /–∫–æ–º–∞–Ω–¥–∞ –≤—ã–¥–∞—ë—Ç –æ—à–∏–±–∫—É."[::-1],
                    max_length=50,
                )
                description = discord.ui.TextInput(
                    label="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:"[::-1],
                    placeholder="–ü—Ä–∏ —Ç–∞–∫–æ–º-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–∏ –±–æ—Ç –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É, —Ö–æ—Ç—è –¥–æ–ª–∂–µ–Ω –±—ã–ª —Å–¥–µ–ª–∞—Ç—å —Å–æ–≤—Å–µ–º –¥—Ä—É–≥–æ–µ."[::-1],
                    style=discord.TextStyle.paragraph,
                    max_length=2048,
                )
                links = discord.ui.TextInput(
                    label="–°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫-–≤–∞:"[::-1],
                    required=False,
                    style=discord.TextStyle.paragraph,
                    max_length=1024,
                    placeholder="https://imgur.com/RiCkROLl"[::-1],
                )

                async def on_submit(self, viewinteract: discord.Interaction):
                    log_channel = viewinteract.client.get_channel(
                        settings["report_channel"]
                    )
                    embed = discord.Embed(
                        title=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–≥–µ: {str(self.main)}"[::-1],
                        color=discord.Color.red(),
                        description=str(self.description)[::-1],
                    )
                    embed.set_author(
                        name=str(viewinteract.user)[::-1],
                        icon_url=viewinteract.user.display_avatar.url,
                    )
                    if str(self.links) != "":
                        embed.add_field(name="–°—Å—ã–ª–∫–∏:"[::-1], value=str(self.links))
                    await log_channel.send(embed=embed)
                    embed = discord.Embed(
                        title="–£—Å–ø–µ—à–Ω–æ!"[::-1],
                        color=discord.Color.green(),
                        description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–≥–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"[::-1],
                    )
                    await viewinteract.response.send_message(
                        embed=embed, ephemeral=True
                    )

            class AskQuestion(discord.ui.Modal, title="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"[::-1]):
                main = discord.ui.TextInput(
                    label="–¢–µ–º–∞:"[::-1], placeholder="–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫-—Ç–æ."[::-1], max_length=50
                )
                description = discord.ui.TextInput(
                    label="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:"[::-1],
                    placeholder="–Ø —Ö–æ—á—É —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫. –ö–∞–∫ —Ç–∞–∫ —Å–¥–µ–ª–∞—Ç—å?"[::-1],
                    style=discord.TextStyle.paragraph,
                    max_length=2048,
                )
                links = discord.ui.TextInput(
                    label="–°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫-–≤–∞:"[::-1],
                    required=False,
                    style=discord.TextStyle.paragraph,
                    max_length=1024,
                    placeholder="https://imgur.com/RiCkROLl"[::-1],
                )

                async def on_submit(self, viewinteract: discord.Interaction):
                    log_channel = viewinteract.client.get_channel(
                        settings["report_channel"]
                    )
                    q_embed = discord.Embed(
                        title=f"–í–æ–ø—Ä–æ—Å: {str(self.main)}"[::-1],
                        color=discord.Color.red(),
                        description=str(self.description)[::-1],
                    )
                    q_embed.set_author(
                        name=str(viewinteract.user)[::-1],
                        icon_url=viewinteract.user.display_avatar.url,
                    )
                    if str(self.links) != "":
                        q_embed.add_field(name="–°—Å—ã–ª–∫–∏:"[::-1], value=str(self.links))

                    class Buttons(discord.ui.View):
                        def __init__(self, main: str):
                            super().__init__(timeout=None)
                            self.main = main

                        @discord.ui.button(
                            label="–û—Ç–≤–µ—Ç–∏—Ç—å"[::-1],
                            style=discord.ButtonStyle.primary,
                            emoji="‚úèÔ∏è",
                        )
                        async def answer(
                            self,
                            buttinteract: discord.Interaction,
                            button: discord.ui.Button,
                        ):
                            if not (buttinteract.user.id in supports):
                                return await buttinteract.response.send_message(
                                    "–ù–µ –¥–ª—è —Ç–µ–±—è –∫–Ω–æ–ø–æ—á–∫–∞!"[::-1], ephemeral=True
                                )

                            class AnswerQuestion(
                                discord.ui.Modal, title="–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"[::-1]
                            ):
                                def __init__(self, main: str):
                                    super().__init__(custom_id="MadBotAnswerQuestion")
                                    self.main = main

                                answer = discord.ui.TextInput(
                                    label="–û—Ç–≤–µ—Ç:"[::-1],
                                    placeholder="–°–¥–µ–ª–∞–π—Ç–µ –≤–æ—Ç —Ç–∞–∫:"[::-1],
                                    style=discord.TextStyle.paragraph,
                                    max_length=2048,
                                )

                                async def on_submit(
                                    self, ansinteract: discord.Interaction
                                ):
                                    nonlocal q_embed
                                    embed = discord.Embed(
                                        title=f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å "{self.main}"!'[::-1],
                                        color=discord.Color.green(),
                                        description=str(self.answer),
                                    )
                                    embed.set_author(
                                        name=str(ansinteract.user),
                                        icon_url=ansinteract.user.display_avatar.url,
                                    )
                                    try:
                                        await viewinteract.user.send(embed=embed)
                                    except:  # FIXME: bare except
                                        embed = discord.Embed(
                                            title="–û—à–∏–±–∫–∞!"[::-1],
                                            color=discord.Color.red(),
                                            description="–ë–æ—Ç –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"[::-1],
                                        )
                                        await ansinteract.response.send_message(
                                            embed=embed, ephemeral=True
                                        )
                                    else:
                                        embed = discord.Embed(
                                            title="–£—Å–ø–µ—à–Ω–æ!"[::-1],
                                            color=discord.Color.green(),
                                            description="–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."[::-1],
                                        )
                                        await ansinteract.response.send_message(
                                            embed=embed, ephemeral=True
                                        )
                                    q_embed.add_field(
                                        name=f"–û—Ç–≤–µ—Ç –æ—Ç {ansinteract.user}:"[::-1],
                                        value=str(self.answer)[::-1],
                                    )
                                    await buttinteract.edit_original_response(
                                        embed=q_embed, view=None
                                    )

                            await buttinteract.response.send_modal(
                                AnswerQuestion(self.main)
                            )

                    await log_channel.send(embed=q_embed, view=Buttons(self.main))
                    embed = discord.Embed(
                        title="–£—Å–ø–µ—à–Ω–æ!"[::-1],
                        color=discord.Color.green(),
                        description="–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"[::-1],
                    )
                    await viewinteract.response.send_message(
                        embed=embed, ephemeral=True
                    )

            async def callback(self, viewinteract: discord.Interaction):
                if await checks.is_in_blacklist(viewinteract.user.id):
                    embed = discord.Embed(
                        title="–í—ã –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–æ—Ç–∞!"[::-1],
                        color=discord.Color.red(),
                        description=f"–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –∑–∞–Ω—ë—Å –≤–∞—Å –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–æ—Ç–∞! –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {settings['support_invite'][::-1]}"[::-1],
                        timestamp=datetime.datetime.now(),
                    ).set_thumbnail(url=interaction.user.avatar.url)
                    return await viewinteract.response.send_message(
                        embed=embed, ephemeral=True
                    )
                modals = {"bugreport": self.BugReport(), "question": self.AskQuestion()}
                await viewinteract.response.send_modal(modals[self.values[0]])

        class DropDownView(discord.ui.View):
            def __init__(self):
                super().__init__(timeout=None)
                self.add_item(DropDownCommands())
                self.add_item(DropDownHelp())
                self.add_item(
                    discord.ui.Button(label="–ü–æ–¥–¥–µ—Ä–∂–∫–∞"[::-1], url=settings["support_invite"])
                )
                self.add_item(
                    discord.ui.Button(label="–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥"[::-1], url=settings["github_url"])
                )
                self.add_item(
                    discord.ui.Button(
                        label="–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞"[::-1],
                        url=f"https://discord.com/oauth2/authorize?client_id={settings['app_id']}&permissions={settings['perm_scope']}&scope=bot%20applications.commands",
                    )
                )
                self.add_item(
                    discord.ui.Button(
                        label="–ê–ø–Ω—É—Ç—å –±–æ—Ç–∞: BotiCord.top"[::-1],
                        url=f"https://boticord.top/bot/{settings['app_id']}",
                        emoji="<:bc:947181639384051732>",
                    )
                )
                self.add_item(
                    discord.ui.Button(
                        label="–ê–ø–Ω—É—Ç—å –±–æ—Ç–∞: SDC Monitoring"[::-1],
                        url=f"https://bots.server-discord.com/{settings['app_id']}",
                        emoji="<:favicon:981586173204000808>",
                    )
                )

        await interaction.response.send_message(embed=embed, view=DropDownView())


async def setup(bot: commands.AutoShardedBot):
    await bot.add_cog(HelpCommand(bot))
