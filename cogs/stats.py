import discord
import config
import datetime

from discord.ext import commands
from discord import app_commands
from discord import ui
from typing import Optional

from classes.checks import isPremiumServer, isPremium
from classes import checks
from config import *


def default_cooldown(interaction: discord.Interaction) -> Optional[app_commands.Cooldown]:
    if (isPremium(interaction.client, interaction.user.id) != 'None' or
            isPremiumServer(interaction.client, interaction.guild)):
        return None
    return app_commands.Cooldown(1, 3.0)


def hard_cooldown(interaction: discord.Interaction) -> Optional[app_commands.Cooldown]:
    if (isPremium(interaction.client, interaction.user.id) != 'None' or
            isPremiumServer(interaction.client, interaction.guild)):
        return app_commands.Cooldown(1, 2.0)
    return app_commands.Cooldown(1, 10.0)


class Stats(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.client = client
        self.db = self.client.stats
        self.coll = self.db.guilds

    @app_commands.command(name="stats-setup", description="[–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    @app_commands.checks.dynamic_cooldown(hard_cooldown)
    @app_commands.check(lambda i: not checks.is_in_blacklist(i.user.id))
    @app_commands.check(lambda i: not checks.is_shutted_down(i.command.name))
    async def stats_setup(self, interaction: discord.Interaction):
        config.used_commands += 1
        if checks.is_in_blacklist(interaction.user.id):
            embed = discord.Embed(title="–í—ã –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–æ—Ç–∞!", color=discord.Color.red(),
                                  description=f"–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –∑–∞–Ω—ë—Å –≤–∞—Å –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–æ—Ç–∞! –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {settings['support_invite']}",
                                  timestamp=datetime.datetime.now())
            embed.set_thumbnail(url=interaction.user.avatar.url)
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        if interaction.guild is None:
            embed = discord.Embed(title="–û—à–∏–±–∫–∞!", color=discord.Color.red(),
                                  description="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!")
            embed.set_thumbnail(url=interaction.user.avatar.url)
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        config.lastcommand = "`/stats-setup`"
        if not interaction.user.guild_permissions.manage_channels:
            embed = discord.Embed(
                title="–û—à–∏–±–∫–∞!",
                color=discord.Color.red(),
                description="–£ –í–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–æ `—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏` –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!"
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        """if not isPremiumServer(self.bot, interaction.guild):
            embed = discord.Embed(
                title="–û—à–∏–±–∫–∞!",
                color=discord.Color.red(),
                description="–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º —Å–µ—Ä–≤–µ—Ä–∞–º!"
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)"""
        guild = self.coll.find_one({'id': str(interaction.guild.id)})
        if guild is not None:
            embed = discord.Embed(
                title="–û—à–∏–±–∫–∞!",
                color=discord.Color.red(),
                description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/stats-edit` –∏–ª–∏ `/stats-delete` –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        embed = discord.Embed(
            title="–í—ã–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            color=discord.Color.orange(),
            description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –í—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å."
        )



        class Select(ui.Select):
            db = self.db
            coll = self.coll

            def __init__(self):
                options = [
                    discord.SelectOption(
                        label="–ö–æ–ª-–≤–æ —ç–º–æ–¥–∑–∏",
                        value="emojis",
                        description="–ü–æ–∫–∞–∑ –∫–æ–ª-–≤–∞ —ç–º–æ–¥–∑–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                        emoji="ü§£"
                    ),
                    discord.SelectOption(
                        label="–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≤–æ–π—Å–∞—Ö",
                        value="voice",
                        description="–ü–æ–∫–∞–∑ –∫–æ–ª-–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≤–æ–π—Å–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞.",
                        emoji="üó£Ô∏è"
                    )
                ]
                intent_options = [
                    discord.SelectOption(
                        label="–û–Ω–ª–∞–π–Ω",
                        value="online",
                        description="–ü–æ–∫–∞–∑ –∫–æ–ª-–≤–∞ –ª—é–¥–µ–π –æ–Ω–ª–∞–π–Ω.",
                        emoji="üü¢"
                    ),
                    discord.SelectOption(
                        label="–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                        value="members",
                        description="–ü–æ–∫–∞–∑ –∫–æ–ª-–≤–∞ –ª—é–¥–µ–π –∏ –±–æ—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                        emoji="üë•"
                    ),
                    discord.SelectOption(
                        label="–ö–æ–ª-–≤–æ –ª—é–¥–µ–π",
                        value="people",
                        description="–ü–æ–∫–∞–∑ –∫–æ–ª-–≤–∞ –ª—é–¥–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                        emoji="üë™"
                    ),
                    discord.SelectOption(
                        label="–ö–æ–ª-–≤–æ –±–æ—Ç–æ–≤",
                        value="bots",
                        description="–ü–æ–∫–∞–∑ –∫–æ–ª-–≤–∞ –±–æ—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                        emoji="ü§ñ"
                    )
                ]
                if interaction.client.intents.members and interaction.client.intents.presences: options = intent_options + options
                super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", max_values=len(options), options=options)

            async def callback(self, viewinteract: discord.Interaction):
                await viewinteract.response.defer(thinking=True, ephemeral=True)
                values = self.values
                channels = []
                for value in values:
                    message = "%count%"
                    stat = 0
                    voices = sum(
                        len(voice.voice_states)
                        for voice in viewinteract.guild.voice_channels
                    )
                    bot = sum(bool(member.bot)
                          for member in viewinteract.guild.members)
                    if value == 'bots':
                        message = "–ë–æ—Ç–æ–≤: %count%"
                        stat = bot
                    elif value == 'emojis':
                        message = "–≠–º–æ–¥–∑–∏: %count%"
                        stat = len(viewinteract.guild.emojis)
                    elif value == 'members':
                        message = "–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: %count%"
                        stat = viewinteract.guild.member_count
                    elif value == 'online':
                        message = "–û–Ω–ª–∞–π–Ω: %count%"
                        stat = (
                                len(list(
                                    filter(lambda x: x.status == discord.Status.online, viewinteract.guild.members)))
                                + len(
                            list(filter(lambda x: x.status == discord.Status.idle, viewinteract.guild.members)))
                                + len(
                            list(filter(lambda x: x.status == discord.Status.dnd, viewinteract.guild.members)))
                        )
                    elif value == 'people':
                        message = "–õ—é–¥–µ–π: %count%"
                        stat = viewinteract.guild.member_count - bot
                    elif value == 'voice':
                        message = "–í –≤–æ–π—Å–∞—Ö: %count%"
                        stat = voices
                    try:
                        channel = await viewinteract.guild.create_voice_channel(
                            name=message.replace("%count%", str(stat)), position=0,
                            overwrites={viewinteract.guild.default_role: discord.PermissionOverwrite(connect=False)})
                    except:
                        embed = discord.Embed(
                            title="–û—à–∏–±–∫–∞!",
                            color=discord.Color.red(),
                            description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ `—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏`, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–ª—è –±–æ—Ç–∞."
                        )
                        return await viewinteract.followup.send(embed=embed)
                    channels.append({'type': value, 'id': str(channel.id), 'text': message})
                self.coll.insert_one(
                    {'id': str(viewinteract.guild.id), 'next_update': round(time.time()) + 600, 'channels': channels})
                embed = discord.Embed(
                    title="–£—Å–ø–µ—à–Ω–æ!",
                    color=discord.Color.green(),
                    description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**\n- –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –∏—Ö –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–æ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∏—Ö —á–µ—Ä–µ–∑ Discord. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–º–∞–Ω–¥—É `/stats-edit`.\n- –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞, –æ–Ω –±—É–¥–µ—Ç —Ç–∞–∫–∂–µ —É–¥–∞–ª—ë–Ω –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n- –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏ —É —á–µ–ª–æ–≤–µ–∫–∞, –¥–∞–≤—à–µ–≥–æ –µ—ë –í–∞–º, –±–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É, –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
                )
                await viewinteract.followup.send(embed=embed)
                await interaction.edit_original_response(view=None)


        class View(ui.View):
            def __init__(self):
                super().__init__(timeout=None)
                self.add_item(Select())

        await interaction.response.send_message(embed=embed, view=View(), ephemeral=True)

    async def es_autocomplete(self, interaction: discord.Interaction, current: str):
        channels = self.coll.find_one({'id': str(interaction.guild.id)}, {'channels': 1, '_id': 0})
        channels = channels['channels']
        return [app_commands.Choice(name=channel['text'].replace("%count%", ''), value=str(channel['id'])) for channel
                in channels if current.lower() in channel['type']]

    @app_commands.command(name='stats-edit',
                          description="[–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤")
    @app_commands.autocomplete(channel=es_autocomplete)
    @app_commands.checks.dynamic_cooldown(hard_cooldown)
    @app_commands.check(lambda i: not checks.is_in_blacklist(i.user.id))
    @app_commands.check(lambda i: not checks.is_shutted_down(i.command.name))
    @app_commands.describe(channel="–ö–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å.")
    async def edit_stats(self, interaction: discord.Interaction, channel: Optional[str]):
        config.used_commands += 1
        if checks.is_in_blacklist(interaction.user.id):
            embed = discord.Embed(title="–í—ã –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–æ—Ç–∞!", color=discord.Color.red(),
                                  description=f"–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –∑–∞–Ω—ë—Å –≤–∞—Å –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–æ—Ç–∞! –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {settings['support_invite']}",
                                  timestamp=datetime.datetime.now())
            embed.set_thumbnail(url=interaction.user.avatar.url)
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        if interaction.guild is None:
            embed = discord.Embed(title="–û—à–∏–±–∫–∞!", color=discord.Color.red(),
                                  description="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!")
            embed.set_thumbnail(url=interaction.user.avatar.url)
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        config.lastcommand = "`/stats-edit`"
        if not interaction.user.guild_permissions.manage_channels:
            embed = discord.Embed(
                title="–û—à–∏–±–∫–∞!",
                color=discord.Color.red(),
                description="–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ `—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏`, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!"
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        """if not isPremiumServer(self.bot, interaction.guild):
            embed = discord.Embed(
                title="–û—à–∏–±–∫–∞!",
                color=discord.Color.red(),
                description="–í–∞—à —Å–µ—Ä–≤–µ—Ä –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏!"
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)"""
        guild = self.coll.find_one({'id': str(interaction.guild.id)})
        if guild is None:
            embed = discord.Embed(
                title="–û—à–∏–±–∫–∞!",
                color=discord.Color.red(),
                description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/stats-setup` –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        if channel is not None:
            channel: discord.abc.GuildChannel = self.bot.get_channel(int(channel))
            channels: list = self.coll.find_one({'id': str(interaction.guild.id)}, {'_id': 0, 'channels': 1})[
                'channels']
            channel_it: dict = None
            text = ''
            for ch in channels:
                if int(ch['id']) == channel.id:
                    text = ch['text']
                    channel_it = ch
                    break
            embed = discord.Embed(
                title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
                color=discord.Color.orange(),
                description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–∞–Ω–∞–ª–æ–º.\n\n**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é:**\n- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å `%count%`. –î–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç –±–æ—Ç—É, –≥–¥–µ –¥–æ–ª–∂–Ω–æ —Å—Ç–æ—è—Ç—å —á–∏—Å–ª–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n- –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è, –Ω–∞—Ä—É—à–∞—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ Discord. –í —Å–ª—É—á–∞–µ –ø–æ–ø—ã—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–∫–æ–≥–æ –∏–º–µ–Ω–∏, –í–∞–º –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–¥–∞–Ω –ß–° –±–æ—Ç–∞."
            )

            class Buttons(ui.View):
                def __init__(self):
                    super().__init__(timeout=None)

                @ui.button(label="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", style=discord.ButtonStyle.green)
                async def rename(self, viewinteract: discord.Interaction, button: ui.Button):
                    class Input(ui.Modal, title="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"):
                        txt = ui.TextInput(label="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:", default=text, max_length=100, min_length=7)

                        async def on_submit(self, minteract: discord.Interaction):
                            if str(self.txt).find("%count%") == -1:
                                embed = discord.Embed(
                                    title="–û—à–∏–±–∫–∞!",
                                    color=discord.Color.red(),
                                    description="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å `%count%`, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–æ—Ç—É, –∫—É–¥–∞ —Å—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–æ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."
                                )
                                return await minteract.response.send_message(embed=embed, ephemeral=True)
                            coll = client.stats.guilds
                            channels.remove(channel_it)
                            channel_it['text'] = str(self.txt)
                            channels.append(channel_it)
                            coll.update_one({'id': str(minteract.guild.id)}, {'$set': {'channels': channels}})
                            embed = discord.Embed(
                                title="–£—Å–ø–µ—à–Ω–æ!",
                                color=discord.Color.green(),
                                description=f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ `{str(self.txt).replace('%count%', '[—á–∏—Å–ª–æ]')}`. –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."
                            )
                            await minteract.response.send_message(embed=embed, ephemeral=True)

                    await viewinteract.response.send_modal(Input())

                @ui.button(label="–£–¥–∞–ª–∏—Ç—å", style=discord.ButtonStyle.red)
                async def delete(self, viewinteract: discord.Interaction, button: ui.Button):
                    channels.remove(channel_it)
                    coll = client.stats.guilds
                    coll.update_one({'id': str(viewinteract.guild.id)}, {'$set': {'channels': channels}})
                    try:
                        await channel.delete()
                    except:
                        embed = discord.Embed(
                            title="–û—à–∏–±–∫–∞!",
                            color=discord.Color.red(),
                            description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ `—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏`, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–ª—è –±–æ—Ç–∞."
                        )
                        return await viewinteract.response.send_message(embed=embed, ephemeral=True)
                    embed = discord.Embed(
                        title="–£—Å–ø–µ—à–Ω–æ!",
                        color=discord.Color.green(),
                        description=f"–ö–∞–Ω–∞–ª `{channel.name}` —É–¥–∞–ª—ë–Ω!"
                    )
                    await viewinteract.response.send_message(embed=embed, ephemeral=True)
                    self.stop()

            return await interaction.response.send_message(embed=embed, ephemeral=True, view=Buttons())
        embed = discord.Embed(
            title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
            color=discord.Color.orange(),
            description=(
                "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã. –ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω –∫–∞–Ω–∞–ª - —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç. "
                "–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/stats-delete`.")
        )

        class Select(ui.Select):
            db = self.db
            coll = self.coll

            def __init__(self):
                options = [
                    discord.SelectOption(
                        label="–ö–æ–ª-–≤–æ —ç–º–æ–¥–∑–∏",
                        value="emojis",
                        description="–ü–æ–∫–∞–∑ –∫–æ–ª-–≤–∞ —ç–º–æ–¥–∑–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                        emoji="ü§£"
                    ),
                    discord.SelectOption(
                        label="–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≤–æ–π—Å–∞—Ö",
                        value="voice",
                        description="–ü–æ–∫–∞–∑ –∫–æ–ª-–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≤–æ–π—Å–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞.",
                        emoji="üó£Ô∏è"
                    )
                ]
                intent_options = [
                    discord.SelectOption(
                        label="–û–Ω–ª–∞–π–Ω",
                        value="online",
                        description="–ü–æ–∫–∞–∑ –∫–æ–ª-–≤–∞ –ª—é–¥–µ–π –æ–Ω–ª–∞–π–Ω.",
                        emoji="üü¢"
                    ),
                    discord.SelectOption(
                        label="–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                        value="members",
                        description="–ü–æ–∫–∞–∑ –∫–æ–ª-–≤–∞ –ª—é–¥–µ–π –∏ –±–æ—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                        emoji="üë•"
                    ),
                    discord.SelectOption(
                        label="–ö–æ–ª-–≤–æ –ª—é–¥–µ–π",
                        value="people",
                        description="–ü–æ–∫–∞–∑ –∫–æ–ª-–≤–∞ –ª—é–¥–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                        emoji="üë™"
                    ),
                    discord.SelectOption(
                        label="–ö–æ–ª-–≤–æ –±–æ—Ç–æ–≤",
                        value="bots",
                        description="–ü–æ–∫–∞–∑ –∫–æ–ª-–≤–∞ –±–æ—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                        emoji="ü§ñ"
                    )
                ]
                if interaction.client.intents.members and interaction.client.intents.presences: options = intent_options + options
                channels = self.coll.find_one({'id': str(interaction.guild.id)})['channels']
                for channel in channels:
                    for option in options:
                        if option.value == channel['type']: options.remove(option)
                super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", max_values=len(options), options=options)

            async def callback(self, viewinteract: discord.Interaction):
                await viewinteract.response.defer(thinking=True, ephemeral=True)
                values = self.values
                channels = self.coll.find_one({'id': str(viewinteract.guild.id)})['channels']
                for value in values:
                    message = "%count%"
                    stat = 0
                    bot = 0
                    voices = 0
                    for voice in viewinteract.guild.voice_channels:
                        voices += len(voice.voice_states)
                    for member in viewinteract.guild.members:
                        if member.bot: bot += 1
                    if value == 'online':
                        message = "–û–Ω–ª–∞–π–Ω: %count%"
                        stat = (
                                len(list(
                                    filter(lambda x: x.status == discord.Status.online, viewinteract.guild.members)))
                                + len(
                            list(filter(lambda x: x.status == discord.Status.idle, viewinteract.guild.members)))
                                + len(
                            list(filter(lambda x: x.status == discord.Status.dnd, viewinteract.guild.members)))
                        )
                    if value == 'members': message = "–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: %count%"; stat = viewinteract.guild.member_count
                    if value == 'people': message = "–õ—é–¥–µ–π: %count%"; stat = viewinteract.guild.member_count - bot
                    if value == 'bots': message = "–ë–æ—Ç–æ–≤: %count%"; stat = bot
                    if value == 'emojis': message = "–≠–º–æ–¥–∑–∏: %count%"; stat = len(viewinteract.guild.emojis)
                    if value == 'voice': message = "–í –≤–æ–π—Å–∞—Ö: %count%"; stat = voices
                    try:
                        channel = await viewinteract.guild.create_voice_channel(
                            name=message.replace("%count%", str(stat)), position=0,
                            overwrites={viewinteract.guild.default_role: discord.PermissionOverwrite(connect=False)})
                    except:
                        embed = discord.Embed(
                            title="–û—à–∏–±–∫–∞!",
                            color=discord.Color.red(),
                            description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ `—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏`, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–ª—è –±–æ—Ç–∞."
                        )
                        return await viewinteract.followup.send(embed=embed)
                    channels.append({'type': value, 'id': str(channel.id), 'text': message})
                self.coll.update_one({'id': str(viewinteract.guild.id)}, {'$set': {'channels': channels}})
                embed = discord.Embed(
                    title="–£—Å–ø–µ—à–Ω–æ!",
                    color=discord.Color.green(),
                    description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
                )
                await viewinteract.followup.send(embed=embed)
                await interaction.edit_original_response(view=None)

        class View(ui.View):
            def __init__(self):
                super().__init__(timeout=None)
                self.add_item(Select())

        await interaction.response.send_message(embed=embed, view=View(), ephemeral=True)

    @app_commands.command(name="stats-delete", description="[–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞] –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    @app_commands.checks.dynamic_cooldown(hard_cooldown)
    @app_commands.check(lambda i: not checks.is_in_blacklist(i.user.id))
    @app_commands.check(lambda i: not checks.is_shutted_down(i.command.name))
    async def stats_delete(self, interaction: discord.Interaction):
        config.used_commands += 1
        if checks.is_in_blacklist(interaction.user.id):
            embed = discord.Embed(title="–í—ã –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–æ—Ç–∞!", color=discord.Color.red(),
                                  description=f"–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –∑–∞–Ω—ë—Å –≤–∞—Å –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–æ—Ç–∞! –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {settings['support_invite']}",
                                  timestamp=datetime.datetime.now())
            embed.set_thumbnail(url=interaction.user.avatar.url)
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        if interaction.guild is None:
            embed = discord.Embed(title="–û—à–∏–±–∫–∞!", color=discord.Color.red(),
                                  description="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!")
            embed.set_thumbnail(url=interaction.user.avatar.url)
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        config.lastcommand = "`/stats-delete`"
        if not interaction.user.guild_permissions.manage_channels:
            embed = discord.Embed(
                title="–û—à–∏–±–∫–∞!",
                color=discord.Color.red(),
                description="–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ `—É–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª–∞–º–∏`, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã!"
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        doc = self.coll.find_one({'id': str(interaction.guild.id)})
        if doc is None:
            embed = discord.Embed(
                title="–û—à–∏–±–∫–∞!",
                color=discord.Color.red(),
                description="–£ –í–∞—Å –Ω–µ—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏! –î–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–ø–∏—à–∏—Ç–µ `/stats-setup`."
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        await interaction.response.defer(thinking=True)
        for channel in doc['channels']:
            ch = self.bot.get_channel(int(channel['id']))
            if ch is None: continue
            try:
                await ch.delete()
            except:
                embed = discord.Embed(
                    title="–û—à–∏–±–∫–∞!",
                    color=discord.Color.red(),
                    description="–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ `—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏`, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–ª—è –±–æ—Ç–∞."
                )
                return await interaction.followup.send(embed=embed)
        self.coll.delete_one({'id': str(interaction.guild.id)})
        embed = discord.Embed(
            title="–£—Å–ø–µ—à–Ω–æ!",
            color=discord.Color.green(),
            description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞!"
        )
        await interaction.followup.send(embed=embed)

    @app_commands.command(name="stats-info", description='[–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞] –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.')
    @app_commands.checks.dynamic_cooldown(default_cooldown)
    @app_commands.check(lambda i: not checks.is_in_blacklist(i.user.id))
    @app_commands.check(lambda i: not checks.is_shutted_down(i.command.name))
    async def stats_info(self, interaction: discord.Interaction):
        config.used_commands += 1
        if checks.is_in_blacklist(interaction.user.id):
            embed = discord.Embed(title="–í—ã –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–æ—Ç–∞!", color=discord.Color.red(),
                                  description=f"–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –∑–∞–Ω—ë—Å –≤–∞—Å –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–æ—Ç–∞! –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {settings['support_invite']}",
                                  timestamp=datetime.datetime.now())
            embed.set_thumbnail(url=interaction.user.avatar.url)
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        if interaction.guild is None:
            embed = discord.Embed(title="–û—à–∏–±–∫–∞!", color=discord.Color.red(),
                                  description="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!")
            embed.set_thumbnail(url=interaction.user.avatar.url)
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        config.lastcommand = "`/stats-info`"
        if not interaction.user.guild_permissions.manage_channels:
            embed = discord.Embed(
                title="–û—à–∏–±–∫–∞!",
                color=discord.Color.red(),
                description="–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ `—É–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª–∞–º–∏`, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã!"
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        doc = self.coll.find_one({'id': str(interaction.guild.id)})
        if doc is None:
            embed = discord.Embed(
                title="–û—à–∏–±–∫–∞!",
                color=discord.Color.red(),
                description="–£ –í–∞—Å –Ω–µ—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏! –î–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–ø–∏—à–∏—Ç–µ `/stats-setup`."
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        description = "–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∞ —Ç–∞–∫–∂–µ —É–∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ –±–æ—Ç –æ–±–Ω–æ–≤–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n\n**__–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:__**\n"
        count = 1
        for channel in doc['channels']:
            ch = self.bot.get_channel(int(channel['id']))
            if ch is None: continue
            description += f"> `{count}.` {ch.name}.\n"
            count += 1
        embed = discord.Embed(
            title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            color=discord.Color.orange(),
            description=description
        )
        embed.add_field(name="–°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:", value=f"<t:{doc['next_update']}:R> (<t:{doc['next_update']}>)")
        await interaction.response.send_message(embed=embed)


async def setup(bot: commands.Bot):
    await bot.add_cog(Stats(bot))
    print("Cog \"Stats\" –∑–∞–ø—É—â–µ–Ω!")
